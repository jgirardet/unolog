{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"vie",
				"viewsets\tmodule"
			],
			[
				"YG",
				"YG_LOGIN_URL\tstatement"
			],
			[
				"YG_LO",
				"YG_LOGOUT_URL\tstatement"
			],
			[
				"down",
				"download_dot_torrent_file"
			],
			[
				"do",
				"download_dot_torrent_file"
			],
			[
				"se",
				"sessions\tmodule"
			],
			[
				"pill",
				"Pillow"
			]
		]
	},
	"buffers":
	[
		{
			"file": "unologbase/tests/test_patients.py",
			"settings":
			{
				"buffer_size": 1794,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import datetime\nimport random\nfrom string import capwords\n\nimport pytest\nfrom mixer.backend.django import Mixer, mixer\nfrom rest_framework import serializers\nfrom rest_framework.reverse import reverse\nfrom rest_framework.test import (APIClient, APIRequestFactory,\n                                 force_authenticate)\nfrom unologbase.models import Patient\nfrom unologbase.serializers import PatientSerializer\n\npytestmark = pytest.mark.django_db\n\n\nclass TestPatientSerializer:\n    \"\"\"\n    Class fort PatientSerializer testing\n    \"\"\"\n\n    def test_check_birthdate(self):\n        \"\"\"\n        check no bithdate later\n        \"\"\"\n\n        d = datetime.date(3000, 1, 1)\n        p = Mixer(commit=False).blend(Patient)\n\n        p.birthdate = d\n        [p.__dict__.pop(k) for k in ('id', '_state')]\n        s = PatientSerializer(data=p.__dict__)\n        with pytest.raises(serializers.ValidationError):\n            s.is_valid(raise_exception=True), \"sould return validation error\"\n\n\n\n\n\n\n\n\n    def test_postal_code_max_size(self, patient_dict):\n        patient_dict['postalcode'] = \"123456\"\n        s = PatientSerializer(data=patient_dict)\n        with pytest.raises(serializers.ValidationError):\n            s.is_valid(raise_exception=True), \" postale code can't be 6 chars\"\n\n    def test_postal_code_max_size(self, patient_dict):\n        patient_dict['postalcode'] = \"AAAAA\"\n        s = PatientSerializer(data=patient_dict)\n        with pytest.raises(serializers.ValidationError):\n            s.is_valid(raise_exception=True), \" postale code can't be chars\"\n\n    def test_phone_number_is_well_formated(self, patient_dict):\n        a = patient_dict\n        a['phonenumber'] = random.randrange(100000 - 88000)\n        s = PatientSerializer(data=a)\n        with pytest.raises(serializers.ValidationError):\n            s.is_valid(raise_exception=True), \" sould start with + or 0\"\n\n    def test_fix(self, apiclient):\n        r = apiclient.get('/api')\n        assert r.status_code == 404\n",
			"file": "unologbase/tests/test_serializers.py",
			"file_size": 1967,
			"file_write_time": 131502164513301159,
			"settings":
			{
				"buffer_size": 1974,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jimmy/.config/sublime-text-3/Packages/User/PyYapf.sublime-settings",
			"settings":
			{
				"buffer_size": 57,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{\n    //Must be set in project because its per project thing\n    //\"python_interpreter\": \"/home/jimmy/.env/lequipeur--IVPCM_Y/bin/python\",\n    // \"python_interpreter\": \"$VIRTUAL_ENV/bin/python\",\n\n    //Lint and auto formating stuf\n    \"auto_formatting\": true,\n    \"autoformat_ignore\":\n    [\n        \"E501\" //line too long\n    ],\n    \"pep8_ignore\":\n    [\n        \"E501\"\n    ],\n    \"anaconda_linter_underlines\": false,\n    \"anaconda_linter_mark_style\": \"none\", // just point glutter\n    \"anaconda_gutter_theme\": \"hard\", //type de point\n\n    \n    //signature business\n    \"display_signatures\": false,\n    \"enable_signatures_tooltip\": false,\n    \"enable_docstrings_tooltip\": false,\n    \"merge_signatures_and_doc\": false,\n\n    //autocomplete args\n    \"complete_parameters\": true,\n\n\n\n    \"auto_python_builder_enabled\": false,\n}",
			"file": "/home/jimmy/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
			"file_size": 821,
			"file_write_time": 131483751095583992,
			"settings":
			{
				"buffer_size": 821,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{\n      // full path and command to run yapf\n      \"yapf_command\": \"/usr/local/bin/yapf\",\n\n      // reformat entire file if no text is selected\n      \"use_entire_file_if_no_selection\": true,\n\n      // run yapf before saving document\n      \"on_save\": false,\n\n      // report errors in popup dialog (in addition to status bar)\n      \"popup_errors\": false,\n\n      // if no encoding is specified use this.  utf-8 is a good choice,\n      // ascii is (much) more restrictive.  any of these should work:\n      // https://docs.python.org/2/library/codecs.html#standard-encodings\n      \"default_encoding\": \"UTF-8\",\n\n      // custom yapf style options\n      //\n      // if commented out then yapf will search for the formatting style in the following manner:\n      // 1. in the [style] section of a .style.yapf file in either the current directory or one of its parent directories.\n      // 2. in the [yapf] section of a setup.cfg file in either the current directory or one of its parent directories.\n      // 3. in the ~/.config/yapf/style file in your home directory.\n      // if none of those files are found, the default style is used (PEP8).\n      //\n      /*\n      \"config\": {\n            // Determines which of the predefined styles this custom style is based on.\n            \"based_on_style\": \"pep8\",\n\n            // Align closing bracket with visual indentation.\n            \"ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT\": true,\n\n            // Insert a blank line before a 'def' or 'class' immediately\n            // nested within another 'def' or 'class'.\n            //\n            // For example:\n            //\n            // class Foo:\n            //                    # <------ this blank line\n            //   def method():\n            //     ...\n            //\n            \"BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF\": false,\n\n            // The column limit.\n            \"COLUMN_LIMIT\": 79,\n\n            // Indent width for line continuations.\n            \"CONTINUATION_INDENT_WIDTH\": 4,\n\n            // Put closing brackets on a separate line, dedented, if the\n            // bracketed expression can't fit in a single line. Applies to\n            // all kinds of brackets, including function definitions and calls.\n            //\n            // For example:\n            //\n            // config = {\n            //     'key1': 'value1',\n            //     'key2': 'value2',\n            // }        # <--- this bracket is dedented and on a separate line\n            //\n            // time_series = self.remote_client.query_entity_counters(\n            //   entity='dev3246.region1',\n            //   key='dns.query_latency_tcp',\n            //   transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n            //   start_ts=now()-timedelta(days=3),\n            //   end_ts=now(),\n            // )        # <--- this bracket is dedented and on a separate line\n\n            \"DEDENT_CLOSING_BRACKETS\": false,\n\n            // The regex for an i18n comment. The presence of this comment stops\n            // reformatting of that line, because the comments are required to be\n            // next to the string they translate.\n            \"I18N_COMMENT\": \"\",\n\n            // The i18n function call names. The presence of this function stops\n            // reformattting on that line, because the string it has cannot be moved\n            // away from the i18n comment.\n            \"I18N_FUNCTION_CALL\": \"\",\n\n            // Indent the dictionary value if it cannot fit on the same line as the dictionary key.\n            //\n            // For example:\n            //\n            // config = {\n            //     'key1':\n            //         'value1',\n            //     'key2': value1 +\n            //             value2,\n            // }\n            \"INDENT_DICTIONARY_VALUE\": false,\n\n            // The number of columns to use for indentation.\n            \"INDENT_WIDTH\": 4,\n\n            // Join short lines into one line. E.g., single line if statements.\n            \"JOIN_MULTIPLE_LINES\": true,\n\n            // Insert a space between the ending comma and closing bracket of a list,\n            // etc.\n            \"SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET\": true,\n\n            // The number of spaces required before a trailing comment.\n            \"SPACES_BEFORE_COMMENT\": 2,\n\n            // Set to True to prefer splitting before &, | or ^ rather than after.\n            \"SPLIT_BEFORE_BITWISE_OPERATOR\": true,\n\n            // Set to True to prefer splitting before 'and' or 'or' rather than\n            // after.\n            \"SPLIT_BEFORE_LOGICAL_OPERATOR\": false,\n\n            // Split named assignments onto individual lines.\n            \"SPLIT_BEFORE_NAMED_ASSIGNS\": true,\n\n            // The penalty for splitting right after the opening bracket.\n            \"SPLIT_PENALTY_AFTER_OPENING_BRACKET\": 30,\n\n            // The penalty for splitting the line after a unary operator.\n            \"SPLIT_PENALTY_AFTER_UNARY_OPERATOR\": 10000,\n\n            // The penalty of splitting the line around the &, |, and ^ operators.\n            \"SPLIT_PENALTY_BITWISE_OPERATOR\": 300,\n\n            // The penalty for characters over the column limit.\n            \"SPLIT_PENALTY_EXCESS_CHARACTER\": 2500,\n\n            // The penalty incurred by adding a line split to the unwrapped line. The\n            // more line splits added the higher the penalty.\n            \"SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT\": 30,\n\n            // The penalty of splitting a list of import as names.\n            //\n            // For example:\n            //\n            //   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n            //                                                             long_argument_2,\n            //                                                             long_argument_3)\n            //\n            // would reformat to something like:\n            //\n            // from a_very_long_or_indented_module_name_yada_yad import (\n            //     long_argument_1, long_argument_2, long_argument_3)\n            \"SPLIT_PENALTY_IMPORT_NAMES\": 0,\n\n            // The penalty of splitting the line around the 'and' and 'or' operators.\n            \"SPLIT_PENALTY_LOGICAL_OPERATOR\": 300,\n      },\n      */\n\n      // pass source code on stdin (otherwise, a temporary file is used).  only\n      // when this option is enabled yapf will pick up the style as described\n      // in yapf --help).  currently disabled by default due to upstream bug,\n      // see https://github.com/google/yapf/pull/145.\n      \"use_stdin\": false,\n\n      // add extra output to the console for debugging pyyapf/yapf behavior\n      \"debug\": false\n}\n",
			"file": "/home/jimmy/.config/sublime-text-3/Packages/PyYapf Python Formatter/PyYapf.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 6658,
				"line_ending": "Unix",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "linter",
		"selected_items":
		[
			[
				"linter",
				"SublimeLinter: Next Error"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"isort",
				"ImportSort: Sort imports"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"iso",
				"ImportSort: Sort imports"
			],
			[
				"yap",
				"PyYapf: Format Document"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"run",
				"Django: Run Server"
			],
			[
				"pytest",
				"PyTest: Run: All"
			],
			[
				"set pyth",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"fix",
				"Enable Python Fix Imports (until restart)"
			],
			[
				"make",
				"Django: Make Migration"
			],
			[
				"Django:run",
				"Django: Run Server"
			],
			[
				"Django:set",
				"Django: Set Virtual Environment"
			],
			[
				"Django:",
				"Django: Run Server"
			],
			[
				"shel",
				"Django: Shell"
			],
			[
				"term",
				"Terminal: Open"
			],
			[
				"Django:she",
				"Django: Shell"
			],
			[
				"Django:sh",
				"Django: Shell"
			],
			[
				"activ",
				"Virtualenv: Activate"
			],
			[
				"Pinstall",
				"Package Control: Install Package"
			],
			[
				"acti",
				"Virtualenv: Activate"
			],
			[
				"deac",
				"Virtualenv: Deactivate"
			],
			[
				"vi",
				"Virtualenv: Activate"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"Django:vi",
				"Django: Set Virtual Environment"
			],
			[
				"Django:vir",
				"Django: Set Virtual Environment"
			],
			[
				"Django:ru",
				"Django: Run Server"
			],
			[
				"set vi",
				"Django: Set Virtual Environment"
			],
			[
				"comm",
				"Django: Custom Command"
			],
			[
				"Django:se",
				"Django: Set Virtual Environment"
			],
			[
				"test",
				"Anaconda: Run Project Tests"
			],
			[
				"listma",
				"Django: List Migrations"
			],
			[
				"Django:listmigr",
				"Django: List Migrations"
			],
			[
				"migrate",
				"Django: Migrate App"
			],
			[
				"djangmigr",
				"Django: Make Migration"
			],
			[
				"shell",
				"Django: Shell"
			],
			[
				"Django:shell",
				"Django: Shell"
			],
			[
				"runser",
				"Django: Run Server"
			],
			[
				"lint",
				"User: Python Flake8 Lint"
			],
			[
				"Django:runs",
				"Django: Run Server"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"exec",
				"Shell Exec: Open"
			],
			[
				"she",
				"Shell Exec: Open"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"pep",
				"Preferences: AutoPep8 Settings – User"
			],
			[
				"pep8",
				"Preferences: AutoPep8 Settings – User"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"auto",
				"User: Python PEP8 Autoformat"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"sche",
				"Set Syntax: Batch File"
			],
			[
				"pythonte",
				"PythonTest: Run project tests"
			],
			[
				"comando",
				"Commando: Load Bundle"
			],
			[
				"com",
				"Commando: Load Bundle"
			],
			[
				"replpv",
				"SublimeREPL: Python - virtualenv"
			],
			[
				"VIRTU",
				"Virtualenv: Activate"
			],
			[
				"virtua",
				"Virtualenv: Activate"
			],
			[
				"replvir",
				"SublimeREPL: Python - virtualenv"
			],
			[
				"replpyt",
				"SublimeREPL: Python - IPython"
			],
			[
				"virt",
				"Virtualenv: Activate"
			],
			[
				"virtual",
				"Virtualenv: Add directory"
			],
			[
				"repl",
				"SublimeREPL: Python"
			],
			[
				"Django:irtu",
				"Django: Set Virtual Environment"
			],
			[
				"Django:runser",
				"Django: Run Server"
			],
			[
				"djan",
				"Django: Run Server"
			],
			[
				"Django:rn",
				"Django: Run Server"
			],
			[
				"Django:virt",
				"Django: Set Virtual Environment"
			],
			[
				"anaco",
				"Build With: Anaconda Python Builder"
			],
			[
				"Django:cus",
				"Django: Custom Command"
			],
			[
				"Django:com",
				"Django: Other Command"
			],
			[
				"virtu",
				"Django: Set Virtual Environment"
			],
			[
				"buil",
				"Build With: runserverplus"
			],
			[
				"Django:virtu",
				"Django: Set Virtual Environment"
			],
			[
				"instll",
				"Package Control: Install Package"
			],
			[
				"Django:instal",
				"Django: Pip Install Packages"
			],
			[
				"colo",
				"Convert Case: Lower Case"
			],
			[
				"Django:vit",
				"Django: Set Virtual Environment"
			],
			[
				"Django:server",
				"Django: Run Server"
			],
			[
				"Django: Set ",
				"Django: Set Virtual Environment"
			],
			[
				"Django:ser",
				"Django: Run Server"
			],
			[
				"Django: ",
				"Django: Shell"
			],
			[
				"Django: cus",
				"Django: Custom Command"
			],
			[
				"djan cus",
				"Django: Run Custom Server"
			],
			[
				"djan cu",
				"Django: Run Custom Server"
			],
			[
				"django: ruen",
				"Django: Run Custom Server"
			],
			[
				"djan ru",
				"Django: Run Server"
			],
			[
				"Djan",
				"Django: Run Server"
			],
			[
				"django",
				"Django: Set Virtual Environment"
			],
			[
				"django reun",
				"Django: Set Virtual Environment"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"git: qui",
				"Git: Quick Commit (repo)"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"git add .",
				"Git: Add..."
			],
			[
				"packe",
				"Package Control: List Packages"
			]
		],
		"width": 479.0
	},
	"console":
	{
		"height": 237.0,
		"history":
		[
			"sublime.log_commands(True)",
			"sublime.log.commands(True)",
			"sys.path",
			"import sys",
			"python -V",
			"sys.path",
			"import sys",
			"print($VIRTUAL_ENV)",
			"$VIRTALENV"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/jimmy/dit/unolog"
	],
	"file_history":
	[
		"/home/jimmy/dit/unolog/unolog.sublime-project",
		"/home/jimmy/.config/sublime-text-3/Packages/Virtualenv/Virtualenv.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/jimmy/.config/sublime-text-3/Packages/User/Virtualenv.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/jim/seafile/dev/unolog/projet.anaconda.bk",
		"/home/jim/.config/sublime-text-3/Packages/User/DjangoCommands.sublime-settings",
		"/home/jim/seafile/dev/unolog/unolog.sublime-project",
		"/home/jim/.config/sublime-text-3/Packages/Anaconda/LICENSE",
		"/home/jim/.config/sublime-text-3/Packages/Anaconda/README.md",
		"/home/jim/Seafile/dev/sublime/dj/dj.sublime-project",
		"/home/jim/Seafile/dev/sublime/dj/dj/testdj/test_model.py",
		"/home/jim/Seafile/dev/sublime/dj/dj/testdj/models.py",
		"/home/jimmy/Seafile/dev/sublime/dj/dj/testdj/views.py",
		"/home/jimmy/Seafile/dev/sublime/dj/dj/testdj/models.py",
		"/home/jimmy/Seafile/dev/sublime/dj/dj/manage.py",
		"/home/jimmy/Seafile/dev/sublime/dj/dj/dj/settings.py",
		"/home/jimmy/.cache/.fr-akI5Bh/django-commands.py",
		"/home/jimmy/Seafile/dev/sublime/testsubl/untitled.sublime-project",
		"/home/jimmy/Seafile/dev/sublime/testsubl/test_tourrent.py",
		"/home/jimmy/Seafile/dev/sublime/testsubl/tourrent.py",
		"/home/jimmy/Seafile/dev/sublime/testsubl/essai.py",
		"/home/jim/.config/sublime-text-3/Packages/User/Flake8Lint.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/User/AutoPep8.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/AutoPep8/AutoPep8.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/Python Flake8 Lint/Flake8Lint.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/User/Default.sublime-keymap",
		"/home/jim/.config/sublime-text-3/Packages/Jedi - Python autocompletion/sublime_jedi.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/Jedi - Python autocompletion/Default.sublime-keymap",
		"/home/jim/.config/sublime-text-3/Packages/Jedi - Python autocompletion/Default.sublime-mousemap",
		"/home/jim/.config/sublime-text-3/Packages/User/sublime_jedi.sublime-settings",
		"/home/jim/.env/testsubl-xR3Mhifi/lib/python3.5/site-packages/requests/__init__.py",
		"/home/jim/testsubl/constantes.py",
		"/home/jim/testsubl/untitled.sublime-project",
		"/home/jim/.config/sublime-text-3/Packages/User/SublimeREPL.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/User/Virtualenv.sublime-settings",
		"/home/jim/testsubl/essai.py",
		"/home/jim/dev/unolog/unolog.sublime-project",
		"/home/jim/dev/unolog/unologbase/models/patients.py",
		"/home/jim/dev/unolog/unologbase/mvdvodels.py",
		"/home/jim/.config/sublime-text-3/Packages/User/build/pytest.sublime-build",
		"/home/jim/dev/unolog/unologbase/tests/test_actes.py",
		"/home/jim/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/jim/.config/sublime-text-3/Packages/User/build/runserverplus.sublime-build",
		"/home/jim/.config/sublime-text-3/Packages/Virtualenv/README.md",
		"/home/jim/.config/sublime-text-3/Packages/Virtualenv/Virtualenv.sublime-settings",
		"/home/jim/.config/sublime-text-3/Packages/Terminal/Default (Linux).sublime-keymap",
		"/home/jim/.config/sublime-text-3/Packages/User/Terminal.sublime-settings",
		"/home/jimmy/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/jimmy/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/jimmy/git/unolog/requirements.txt",
		"/home/jimmy/git/unolog/unologbase/tests/test_patients.py",
		"/usr/lib/python3.5/string.py",
		"/home/jimmy/git/unolog/patient.py",
		"/home/jimmy/git/unolog/unousers/models.py",
		"/home/jimmy/git/unolog/unologbase/models/patients.py",
		"/home/jimmy/git/unolog/venv/lib/python3.5/site-packages/django/db/models/manager.py"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "unologbase/tests/test_patients.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1794,
						"regions":
						{
						},
						"selection":
						[
							[
								568,
								568
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "unologbase/tests/test_serializers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1974,
						"regions":
						{
						},
						"selection":
						[
							[
								979,
								979
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/jimmy/.config/sublime-text-3/Packages/User/PyYapf.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 57,
						"regions":
						{
						},
						"selection":
						[
							[
								23,
								23
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/jimmy/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 821,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "/home/jimmy/.config/sublime-text-3/Packages/PyYapf Python Formatter/PyYapf.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6658,
						"regions":
						{
						},
						"selection":
						[
							[
								248,
								248
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 102.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python 3/Python3.sublime-build",
	"project": "unolog.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"tesac",
				"unologbase/tests/test_actes.py"
			],
			[
				"requier",
				"requirements.txt"
			],
			[
				"testpa",
				"unologbase/tests/test_patients.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 575.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 203.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
